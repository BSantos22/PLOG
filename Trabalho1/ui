/*=========================================================================================================================================*/

/* PLAY */
cage :-
	load_libraries,
	play(1, [[2,1,2,1,2,1,2,1,2,1],
		 [1,2,1,2,1,2,1,2,1,2],
		 [2,1,2,1,2,1,2,1,2,1],
		 [1,2,1,2,1,2,1,2,1,2],
		 [2,1,2,1,2,1,2,1,2,1],
		 [1,2,1,2,1,2,1,2,1,2],
		 [2,1,2,1,2,1,2,1,2,1],
		 [1,2,1,2,1,2,1,2,1,2],
		 [2,1,2,1,2,1,2,1,2,1],
		 [1,2,1,2,1,2,1,2,1,2]]).

new_list([]).

/* First argument -> player */
play(1, Board) :-
	print_board(10, Board), nl,
	write('Player1'), nl,
	write('From '),
	get_code(InitialColumn), get_code(InitialLine), skip_line,
	write('To   '),
	get_code(FinalColumn), get_code(FinalLine), skip_line,
	IC is InitialColumn-65, FC is FinalColumn-65, IL is InitialLine-49, FL is FinalLine-49,
	move(Board, NewBoard, IC, IL, FC, FL),
	play(2, NewBoard).

play(2, Board) :-
	print_board(10, Board), nl,
	write('Player2'), nl,
	write('From '),
	get_code(InitialColumn), get_code(InitialLine), skip_line,
	write('To '),
	get_code(FinalColumn), get_code(FinalLine), skip_line,
	IC is InitialColumn-65, FC is FinalColumn-65, IL is InitialLine-49, FL is FinalLine-49,
	move(Board, NewBoard, IC, IL, FC, FL),
	play(1, NewBoard).

/*=========================================================================================================================================*/

/* MOVE PIECE */

/* Move piece */
move(Board, NewBoard, InitialColumn, InitialLine, FinalColumn, FinalLine) :-
	nth0(InitialLine, Board, NewLine1), /* get the line of the piece */
	nth0(InitialColumn, NewLine1, Piece), /* get the piece id to be moved */
	change_board_position(Board, NewBoardTemp, 0, InitialColumn, InitialLine, 0),
	change_board_position(NewBoardTemp, NewBoard, 0, FinalColumn, FinalLine, Piece).
	/*copy_replace(Board, NewBoard, 0, InitialColumn, InitialLine, FinalColumn, FinalLine, Piece).*/


change_board_position([], [], Count, ColumnNr, LineNr, Piece).
change_board_position([Line|Board], [Line|NewBoard], Count, ColumnNr, LineNr, Piece) :-
	Count \= LineNr,
	NextCount is Count+1,
	change_board_position(Board, NewBoard, NextCount, ColumnNr, LineNr, Piece).
change_board_position([Line|Board], NewBoard, Count, ColumnNr, LineNr, Piece) :- 
	change_line_position(Line, NewLine, 0, ColumnNr, Piece),
	NextCount is Count+1,
	change_board_position([NewLine|Board], NewBoard, NextCount, ColumnNr, LineNr, Piece).

change_line_position([], [], Count, ColumnNr, Piece).
change_line_position([Position|Line], [Position|NewLine], Count, ColumnNr, Piece) :-
	Count \= ColumnNr,
	NextCount is Count+1,
	change_line_position(Line, NewLine, NextCount, ColumnNr, Piece).
change_line_position([Position|Line], [Piece|NewLine], Count, ColumnNr, Piece) :-
	NextCount is Count+1,
	change_line_position(Line, NewLine, NextCount, ColumnNr, Piece).




/*
copy :- mylist(X), copy(X, 0, NewX, 6), write(NewX).
copy([], Num, [], Piece).
copy([A|X], Num, [A|NewX], Piece) :- Num \= 1, Num2 is Num+1, copy(X, Num2, NewX, Piece).
copy([A|X], Num, [Piece|NewX], Piece) :- Num2 is Num+1, copy(X, Num2, NewX, Piece).*/



/* Copies Board to NewBoard replacing the place with the piece with 0 (empty place) and the new place with Piece *//*
copy_replace([], NewBoard, CurrentLine, InitialColumn, InitialLine, FinalColumn, FinalLine, Piece).

/* Starting position *//*
copy_replace([Line|Board], NewBoard, InitialLine, InitialColumn, InitialLine, FinalColumn, FinalLine, Piece) :-
	new_list(NewLine),	
	replace_pos(Line, NewLine, 0, InitialColumn, 0),
	NextLine is InitialLine+1,
	copy_replace(Board, [NewBoard|NewLine], NextLine, InitialColumn, InitialLine, FinalColumn, FinalLine, Piece).
	
/* Final position *//*
copy_replace([Line|Board], NewBoard, FinalLine, InitialColumn, InitialLine, FinalColumn, FinalLine, Piece) :-
	new_list(NewLine),
	replace_pos(Line, NewLine, 0, InitialColumn, Piece),
	NextLine is FinalLine+1,
	copy_replace(Board, [NewBoard|NewLine], NextLine, InitialColumn, InitialLine, FinalColumn, FinalLine, Piece).

/* Straight up copy if CurrentLine != InitialLine or FinalLine *//*
copy_replace([Line|Board], [Line|NewBoard], CurrentLine, InitialColumn, InitialLine, FinalColumn, FinalLine, Piece) :-
	NextLine is CurrentLine+1,
	copy_replace(Board, NewBoard, NextLine, InitialColumn, InitialLine, FinalColumn, FinalLine, Piece).

/* Replaces position Pos with Num and returns the next list */
/*replace_pos([], NewLine, CurrentPos, Pos, Num).

replace_pos([Piece|Line], NewLine, CurrentPos, CurrentPos, Num) :-	
	NextPos is CurrentPos+1,
	replace_pos(Line, [NewLine|Num], NextPos, Pos, Num).*//*

replace_pos([Piece|Line], NewLine, CurrentPos, Pos, Num) :-
	NextPos is CurrentPos+1,
	replace_pos(Line, [NewLine|Piece], NextPos, Pos, Num).
*/
/*=========================================================================================================================================*/

print2d([]).
print2d([Line|Board]) :- printline(Line), nl, print2d(Board).

printline([]).
printline([Elem|Line]) :- write(Elem), printline(Line).


/*=========================================================================================================================================*/

/* PRINT BOARD */
/* Print board */
/* parameters: Size - of list; Board - list that represents the board */
print_board(Size, Board) :- nl,print_letters(Size,Size),print_top_lines(Size),print_squares(1,Size,Board),print_bottom_lines(Size).

/* Print letters on top of the board */
print_letters(Size, Size) :- Size > 0, write('    '), print_letter(Size, Size).
print_letter(1, Size) :- write(' '),C is 65+Size-1,put_code(C),write(' '),nl.
print_letter(Line, Size) :- write(' '), C is 65+Size-Line, put_code(C), write(' '), Nextline is Line-1, print_letter(Nextline,Size).

/* Print the top line of the board */
print_top_lines(Column) :- Column > 0,write('    '),lt_corner, print_top_line(Column).
print_top_line(1) :- horiz,horiz,rt_corner, nl.
print_top_line(Column) :- horiz,horiz,top_con, Nextcolumn is Column-1, print_top_line(Nextcolumn).

/* Print the bottom line line of the board */
print_bottom_lines(Column) :- Column > 0,write('    '), lb_corner, print_bottom_line(Column).
print_bottom_line(1) :- horiz,horiz,rb_corner, nl.
print_bottom_line(Column) :- horiz,horiz,bottom_con, Nextcolumn is Column-1, print_bottom_line(Nextcolumn).

/* Print the middle of the board */
print_squares(Currentline, Size, []).
print_squares(1, Size, [Line|Board]) :- print_pieces(1, Size, Line), print_squares(2, Size, Board).
print_squares(Currentline, Size, [Line|Board]) :- print_middle_lines(Size), print_pieces(Currentline, Size, Line), Nextline is Currentline+1, print_squares(Nextline, Size, Board).

/* Print the horizontal lines and connectors of the board */
print_middle_lines(Size) :- Size > 0,write('    '), left_con, print_middle_line(Size).
print_middle_line(1) :- horiz,horiz,right_con, nl.
print_middle_line(Size) :- horiz,horiz,middle, Nextsize is Size-1, print_middle_line(Nextsize).

/* Print the pieces and the vertical lines */
print_pieces(Currline, Nrline, Line) :- Currline >=10, write(' '), write(Currline),write(' '), print_piece(Line),vert, nl.
print_pieces(Currline, Nrline, Line) :- Currline <10, write('  '), write(Currline),write(' '), print_piece(Line),vert, nl.

print_piece([]).
print_piece([0|Line]) :- vert, write('  '), print_piece(Line).
print_piece([1|Line]) :- vert, black_circle,write(' '), print_piece(Line).
print_piece([2|Line]) :- vert, white_circle,write(' '), print_piece(Line).


/* Characteres */

lt_corner :- put_code(9484).
rt_corner :- put_code(9488).
lb_corner :- put_code(9492).
rb_corner :- put_code(9496).
horiz :- put_code(9472).
vert :- put_code(9474).
top_con :- put_code(9516).
bottom_con :- put_code(9524).
left_con :- put_code(9500).
right_con :- put_code(9508).
middle :- put_code(9532).

black_circle :- put_code(11044).
white_circle :- put_code(11093).%put_code(9711).


/*=========================================================================================================================================*/

/* LIBRARIES */

load_libraries :- use_module(library(lists)).













